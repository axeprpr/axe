#!/usr/bin/env python
# -*- coding: utf-8 -*-
import sys,re,os
import pexpect
import struct
import fcntl
import termios
import signal

reload(sys)
sys.setdefaultencoding('utf8')

HELP = "help: \n"
HELP += "axe 1 ==> ssh root@192.222.1.1 (use root password of astute)\n"
HELP += "axe 10.10.1.1 ==> ssh root@10.10.1.1 (use root password of astute)\n"
HELP += "axe 2 3 4 -c 'ls -lrt' ==> run command on host002/3/4 and show result\n"
HELP += "axe 2 3 4 -s './test' '/home/astute' ==> scp file to host002/3/4 on purpose\n" 
HELP += "axe 2 3 4 -s './test' ==> scp file to host002/3/4 to the same place"

USER = 'root'
PASSWORD = 'donotuseroot!'
PORT = '22'

if os.environ.get('AXE_USER'):
    USER = os.environ.get('AXE_USER')

if os.environ.get('AXE_PASSWORD'):
    PASSWORD = os.environ.get('AXE_PASSWORD')

if os.environ.get('AXE_PORT'):
    PORT = os.environ.get('AXE_PORT')

def sigwinch_passthrough (sig, data):
    winsize = getwinsize()
    global child
    child.setwinsize(winsize[0],winsize[1])

def getwinsize():
    """This returns the window size of the child tty.
    The return value is a tuple of (rows, cols).
    """
    if 'TIOCGWINSZ' in dir(termios):
        TIOCGWINSZ = termios.TIOCGWINSZ
    else:
        TIOCGWINSZ = 1074295912L # Assume
    s = struct.pack('HHHH', 0, 0, 0, 0)
    x = fcntl.ioctl(sys.stdout.fileno(), TIOCGWINSZ, s)
    return struct.unpack('HHHH', x)[0:2]


def ssh(user, password, ip, port=PORT, command=""):
    child = pexpect.spawn('ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no %s@%s -p %s %s' %  (user, ip, port, command), env = {"TERM" : "xterm-256color"})
    if command == "":
        signal.signal(signal.SIGWINCH, sigwinch_passthrough)  
    child.expect('[P|p]assword:')
    child.sendline(password)
    if command == "":
        winsize = getwinsize();
        child.setwinsize(winsize[0], winsize[1])
    child.interact()

def scp(user, password, ip, file, port=PORT, destination=None):
    if not destination:
        destination = os.path.dirname(os.path.abspath(file))
        if not destination.endswith('/'):
            destination = destination + '/'
    child = pexpect.spawn('scp -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -P %s -r %s %s@%s:%s' %  (port, file, user, ip, destination))
    child.expect('[P|p]assword:')
    child.sendline(password)
    child.interact()

def is_domain(domain):
    domain_regex = re.compile(
        r'(?:[A-Z0-9_](?:[A-Z0-9-_]{0,247}[A-Z0-9])?\.)+(?:[A-Z]{2,6}|[A-Z0-9-]{2,}(?<!-))\Z', 
        re.IGNORECASE)
    return True if domain_regex.match(domain) else False

def is_ipv4(address):
    ipv4_regex = re.compile(
        r'(?:25[0-5]|2[0-4]\d|[0-1]?\d?\d)(?:\.(?:25[0-5]|2[0-4]\d|[0-1]?\d?\d)){3}',
        re.IGNORECASE)
    return True if ipv4_regex.match(address) else False

def astute_ssh(ip, command=""):
    ssh_to = str(ip)
    try:
        if int(ssh_to) >=1 and int(ssh_to) <=250:
            ssh(USER, PASSWORD, "192.222.1.%s" % ssh_to, command=command)
    except:
        pass
    try:    
        if is_domain(ssh_to) or is_ipv4(ssh_to):
            ssh(USER, PASSWORD, ssh_to, command=command)
    except:
        pass

def astute_scp(ip, file, destination=None):
    scp_to = str(ip)
    try:
        if int(scp_to) >=1 and int(scp_to) <=250:
            scp(USER, PASSWORD, "192.222.1.%s" % scp_to, file, destination=destination)
    except:
        pass
    try:    
        if is_domain(scp_to) or is_ipv4(scp_to):
            scp(USER, PASSWORD, scp_to, file, destination=destination)
    except:
        pass

# main
parameter = sys.argv[1:]

if not parameter:
    print HELP

elif len(parameter) == 1:
    astute_ssh(parameter[0])

elif '-s' in parameter and not '-c' in parameter:
    flag_position = parameter.index('-s')
    hosts = parameter[:flag_position]
    command = parameter[(flag_position+1):]
    if len(command) ==0 or len(command) > 2:
        print HELP
        sys.exit()
    for h in hosts:
        if len(command) == 1:
            print "\033[41;1m SCP %s to %s to the same place." % (command[0], "host-"+h) + "\033[0m"
            destination = None
        else:            
            destination = command[1]
            # home dir need a special treat
            if destination.lower() == os.environ['HOME'].lower():
                destination = '~'
            print "\033[41;1m SCP %s to %s to %s" % (command[0], "host-"+h, destination) + "\033[0m"
        print "----------------------------"
        try:
            astute_scp(h, command[0], destination=destination)
        except:
            print 'Faild. Maybe no such file or directory.'
    sys.exit()

elif '-c' in parameter and not '-s' in parameter:
    flag_position = parameter.index('-c')
    hosts = parameter[:flag_position]
    command = parameter[(flag_position+1):]

    if len(command) ==0 or len(command) > 1:
        print HELP
        sys.exit()
    for h in hosts:
        print "\033[41;1m Run command %s in %s" % (command[0], "host-"+h) + "\033[0m"
        print "----------------------------"
        astute_ssh(h, command[0])
    sys.exit()

else:
    print HELP       
